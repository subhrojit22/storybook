import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '../styles/Home.module.css';
import StoryInput from '../components/StoryInput';
import StoryList from '../components/StoryList';
import Groq from 'groq-sdk';
import { useState } from 'react';

const inter = Inter({ subsets: ['latin'] });

const apiKey = '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'; // API key directly in code

const groq = new Groq({ apiKey });

export async function getGroqChatCompletion(prompt: string) {
  try {
    const response = await groq.chat.completions.create({
      messages: [{ role: 'user', content: prompt }],
      model: 'llama-3.1-70b-versatile',
    });
    return response.choices[0]?.message?.content || '';
  } catch (error) {
    console.error('Error fetching story:', error);
    return 'Error generating story.';
  }
}

export default function Home({ stories }: { stories: any[] }) {
  const [generatedStories, setGeneratedStories] = useState(stories || []);

  const handleGenerate = async (prompt: string) => {
    const newStoryContent = await getGroqChatCompletion(prompt);
    setGeneratedStories(prevStories => {
      return [...prevStories, { name: 'New Story', description: prompt, content: newStoryContent }]
    });
  };

  return (
    <>
      <Head>
        <title>StoryKing</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1 className='text-3xl font-bold underline'>StoryKing</h1>
        <StoryInput onGenerate={handleGenerate} />
        <StoryList stories={generatedStories} />
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const stories = [
    { name: 'Story 1', description: 'A tale of adventure', content: 'Once upon a time...' },
    { name: 'Story 2', description: 'A mystery unfolds', content: 'In a dark and stormy night...' },
    { name: 'Story 3', description: 'A love story blooms', content: 'Two souls met...' },
  ];
  return { props: { stories } };
};
